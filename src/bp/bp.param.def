/* Copyright 2020 HPS/SAFARI Research Groups
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to the
   simulator.  NOTE: Don't screw around with the order of these macro fields without
   fixing the etags regexps.

   DEF_PARAM(  Option, Variable Name, Type, Function, Default Value, Const) 

   Option -- The name of the parameter when given on the command line (eg. "--param_0").
	   All parameters take an argument.  Thus, "--param_0=3" would be a valid
	   specification.

   Variable Name -- The name of the variable that will be created in 'parameters.c' and
	    externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and externed
	   in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will parse the
	    text after the '='.

   Default Value -- The default value that the variable created will have.  This must be
	    the same type as the 'Type' field indicates (or be able to be cast to it).

   Const -- Put the word "const" here if you want this parameter to be constant.  An
	    error messsage will be printed if the user tries to set it with a command
	    line option.

*/


DEF_PARAM(  perfect_bp                , PERFECT_BP                , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  perfect_btb               , PERFECT_BTB               , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  perfect_ibp               , PERFECT_IBP               , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  perfect_crs               , PERFECT_CRS               , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  perfect_cbr_btb           , PERFECT_CBR_BTB           , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  perfect_nt_btb            , PERFECT_NT_BTB            , Flag    , Flag       , FALSE      ,        )

DEF_PARAM(  cfs_per_cycle             , CFS_PER_CYCLE             , uns     , uns        , 3          ,        )
DEF_PARAM(  update_bp_off_path        , UPDATE_BP_OFF_PATH        , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  bp_update_at_retire       , BP_UPDATE_AT_RETIRE       , Flag    , Flag       , FALSE      ,        )

// conditional branch predictor
DEF_PARAM(  bp_mech                   , BP_MECH                   , uns     , bp_mech    , 0          ,        )
DEF_PARAM(  late_bp_mech              , LATE_BP_MECH              , uns     , bp_mech    , NUM_BP     ,        )
DEF_PARAM(  late_bp_latency           , LATE_BP_LATENCY           , uns     , uns        , 5          ,        )
DEF_PARAM(  hist_length               , HIST_LENGTH               , uns     , uns        , 16         ,        )
DEF_PARAM(  pht_ctr_bits              , PHT_CTR_BITS              , uns     , uns        , 2          , const  ) /* const */
DEF_PARAM(  bht_entries               , BHT_ENTRIES               , uns     , uns        , (4 * 1024) ,        )
DEF_PARAM(  bht_assoc                 , BHT_ASSOC                 , uns     , uns        , 4          ,        )
DEF_PARAM(  hybrids_index_length      , HYBRIDS_INDEX_LENGTH      , uns     , uns        , 16         ,        )
DEF_PARAM(  hybridg_hist_length       , HYBRIDG_HIST_LENGTH       , uns     , uns        , 16         ,        )
DEF_PARAM(  hybridp_hist_length       , HYBRIDP_HIST_LENGTH       , uns     , uns        , 16         ,        )
DEF_PARAM(  filter_index_length       , FILTER_INDEX_LENGTH       , uns     , uns        , 16         ,        )
DEF_PARAM(  use_filter                , USE_FILTER                , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  inf_hybridgp              , INF_HYBRIDGP              , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  bp_hash_tos               , BP_HASH_TOS               , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  ibtb_hash_tos             , IBTB_HASH_TOS             , Flag    , Flag       , FALSE      ,        )

DEF_PARAM(  btb_mech                  , BTB_MECH                  , uns     , uns        , 0          ,        )
DEF_PARAM(  btb_entries               , BTB_ENTRIES               , uns     , uns        , (4 * 1024) ,        ) 
DEF_PARAM(  btb_assoc                 , BTB_ASSOC                 , uns     , uns        , 4          ,        )
DEF_PARAM(  btb_off_path_writes       , BTB_OFF_PATH_WRITES       , Flag    , Flag       , TRUE       ,        ) /* const */

DEF_PARAM(  enable_crs                , ENABLE_CRS                , Flag    , Flag       , TRUE       ,        )
DEF_PARAM(  crs_entries               , CRS_ENTRIES               , uns     , uns        , 32         ,        )     
     // CRS_REALISTIC --- 0:off_path does not disturb on_path 1: next & tos scheme (use this if you want a realistic CRS) 
     //                                                       2: pure stack scheme (doesn't work well, b/c of wrong path effects)
DEF_PARAM(  crs_realistic             , CRS_REALISTIC             , uns     , uns        , 0          ,        )
     // Confidence Mechanism

// indirect branch predictor
DEF_PARAM(  enable_ibp                , ENABLE_IBP                , Flag    , Flag       , TRUE       ,        )
DEF_PARAM(  use_pat_hist              , USE_PAT_HIST              , Flag    , Flag       , TRUE       ,        ) /* pattern history */
DEF_PARAM(  ibtb_mech                 , IBTB_MECH                 , uns     , ibtb_mech  , 1          ,        )
DEF_PARAM(  ibtb_hist_length          , IBTB_HIST_LENGTH          , uns     , uns        , 16         ,        )
DEF_PARAM(  ibtb_off_path_writes      , IBTB_OFF_PATH_WRITES      , Flag    , Flag       , TRUE       ,        ) /* const */
DEF_PARAM(  targets_in_hist           , TARGETS_IN_HIST           , uns     , uns        , 4          ,        )
DEF_PARAM(  tc_entries                , TC_ENTRIES                , uns     , uns        , (4 * 1024) ,        )
DEF_PARAM(  tc_assoc                  , TC_ASSOC                  , uns     , uns        , 4          ,        )

DEF_PARAM(  num_corr_branches         , NUM_CORR_BRANCHES         , uns     , uns        , 3          ,        )
DEF_PARAM(  sel_hist_bp_entries       , SEL_HIST_BP_ENTRIES       , uns     , uns        , 8192       ,        )
DEF_PARAM(  sel_hist_length           , SEL_HIST_LENGTH           , uns     , uns        , 16         ,        )
DEF_PARAM(  sel_hist_dyn_cnt_th       , SEL_HIST_DYN_CNT_TH       , uns     , uns        , 16         ,        )
DEF_PARAM(  sel_hist_mispred_th       , SEL_HIST_MISPRED_TH       , uns     , uns        , 4          ,        )

// branch confidence
DEF_PARAM(  enable_bp_conf            , ENABLE_BP_CONF            , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  conf_mech                 , CONF_MECH                 , uns     , conf_mech   , 0         ,        )     
DEF_PARAM(  perf_bp_conf_pred         , PERF_BP_CONF_PRED         , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  bpc_bits                  , BPC_BITS                  , uns     , uns        , 16         ,        )
DEF_PARAM(  bpc_mech                  , BPC_MECH                  , uns     , uns        , 1          ,        )
DEF_PARAM(  bpc_ctr_reset             , BPC_CTR_RESET             , Flag    , Flag       , TRUE       ,        )
DEF_PARAM(  bpc_cit_bits              , BPC_CIT_BITS              , uns     , uns        , 8          ,        )
DEF_PARAM(  bpc_cit_th                , BPC_CIT_TH                , uns     , uns        , 50        ,        )
DEF_PARAM(  bpc_ctr_bits              , BPC_CTR_BITS              , uns     , uns        , 3          ,        )

// on-path confidence mechanism
DEF_PARAM(  opc_count_zeros           , OPC_COUNT_ZEROS           , Flag    , Flag       , FALSE      ,        )
DEF_PARAM(  opc_count_thresh          , OPC_COUNT_THRESH          , uns     , uns        , 10         ,        )

// loop predictor parameters
DEF_PARAM(  inf_loop                  , INF_LOOP                   , Flag    , Flag       , FALSE      ,        ) 
DEF_PARAM(  inf_loop_buckets          , INF_LOOP_BUCKETS           , uns     , uns        , 811        ,        ) 
DEF_PARAM(  loop_entries              , LOOP_ENTRIES               , uns     , uns        , (4 * 1024) ,        ) 
DEF_PARAM(  loop_assoc                , LOOP_ASSOC                 , uns     , uns        , 4          ,        )
DEF_PARAM(  loop_count_max            , LOOP_COUNT_MAX             , uns     , uns        , 127        ,        )
DEF_PARAM(  loop_repeat_max           , LOOP_REPEAT_MAX            , uns     , uns        , 15         ,        )

// branch misprediction information
DEF_PARAM( knob_print_brinfo          , KNOB_PRINT_BRINFO          , Flag    , Flag       , FALSE      ,        )
DEF_PARAM( br_mispred_file            , BR_MISPRED_FILE            , char *  , string     , NULL       ,	)

///////////////////////////////////////////////////////////////////////////
// confidence estimator based on perceptron 

DEF_PARAM(  conf_perceptron_th        , CONF_PERCEPTRON_TH                , int     , int         , 0         ,         ) /* threshold to distinguish high confidence and low confidence */ 
DEF_PARAM(  conf_perceptron_ctr_bits  , CONF_PERCEPTRON_CTR_BITS          , uns     , uns        , 8          ,        )
DEF_PARAM(  conf_perceptron_rows           ,  CONF_PERCEPTRON_ENTRIES     , uns     , uns        , 127       ,        )
DEF_PARAM(  conf_perceptron_thresh_ovrd    , CONF_PERCEPTRON_THRESH_OVRD  , uns     , uns        , 0          ,        )
DEF_PARAM(  conf_hist_length               , CONF_HIST_LENGTH             , uns     , uns        , 32         ,        )
DEF_PARAM(  perceptron_conf_use_conf       , PERCEPTRON_CONF_USE_CONF     , Flag    , Flag        , FALSE     ,           )
DEF_PARAM(  perceptron_conf_train_his      , PERCEPTRON_CONF_TRAIN_HIS    , Flag    , Flag        , FALSE     ,           )
DEF_PARAM(  perceptron_conf_train_conf     , PERCEPTRON_CONF_TRAIN_CONF   , Flag    , Flag        , FALSE     ,           )
DEF_PARAM(  perceptron_conf_train_offset_conf     , PERCEPTRON_CONF_TRAIN_OFFSET_CONF   , Flag    , Flag        , FALSE     ,           )

DEF_PARAM(  perceptron_train_misp_factor  , PERCEPTRON_TRAIN_MISP_FACTOR          , uns     , uns        , 1          ,        )

DEF_PARAM(  perceptron_train_corr_factor  , PERCEPTRON_TRAIN_CORR_FACTOR          , uns     , uns        , 1          ,        )
DEF_PARAM(  perceptron_conf_his_both     , PERCEPTRON_CONF_HIS_BOTH   , Flag    , Flag        , FALSE     ,           )
DEF_PARAM(  perceptron_conf_his_both_length  , PERCEPTRON_CONF_HIS_BOTH_LENGTH   , uns    , uns        , 4     ,           )
