/* Copyright 2020 HPS/SAFARI Research Groups
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to the
   simulator.  NOTE: Don't screw around with the order of these macro fields without

	   All parameters take an argument.  Thus, "--param_0=3" would be a valid
	   specification.

   Variable Name -- The name of the variable that will be created in 'parameters.c' and
	    externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and externed
	   in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will parse the
	    text after the '='.

   Default Value -- The default value that the variable created will have.  This must be
	    the same type as the 'Type' field indicates (or be able to be cast to it).

   Const -- Put the word "const" here if you want this parameter to be constant.  An
	    error messsage will be printed if the user tries to set it with a command
	    line option.

*/

DEF_PARAM(  dvfs_on                       , DVFS_ON                          , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_metric                   , DVFS_METRIC                      , uns    , DVFS_Metric, DVFS_METRIC_NUM_ELEMS,  ) 
DEF_PARAM(  dvfs_configs                  , DVFS_CONFIGS                     , char * , string    , NULL        ,       ) 
DEF_PARAM(  dvfs_config_file              , DVFS_CONFIG_FILE                 , char * , string    , NULL        ,       ) 
DEF_PARAM(  dvfs_start                    , DVFS_START                       , char * , string    , "t:0"       ,       ) 
DEF_PARAM(  dvfs_period                   , DVFS_PERIOD                      , char * , string    , "t:312500000000",   ) 
DEF_PARAM(  dvfs_log                      , DVFS_LOG                         , Flag   , Flag      , TRUE        ,       ) 
DEF_PARAM(  dvfs_individual_cores         , DVFS_INDIVIDUAL_CORES            , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_chip_level               , DVFS_CHIP_LEVEL                  , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_static                   , DVFS_STATIC                      , char * , string    , NULL        ,       )
DEF_PARAM(  dvfs_force_config             , DVFS_FORCE_CONFIG                , char * , string    , NULL        ,       )
DEF_PARAM(  dvfs_replay_config_trace      , DVFS_REPLAY_CONFIG_TRACE         , char * , string    , NULL        ,       )
DEF_PARAM(  dvfs_use_oracle               , DVFS_USE_ORACLE                  , Flag   , Flag      , FALSE       ,       )
DEF_PARAM(  dvfs_use_bw_sharing           , DVFS_USE_BW_SHARING              , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_use_dram_sharing         , DVFS_USE_DRAM_SHARING            , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_use_stall_time           , DVFS_USE_STALL_TIME              , Flag   , Flag      , FALSE       ,       ) 
DEF_PARAM(  dvfs_dram_sharing_solver_bin  , DVFS_DRAM_SHARING_SOLVER_BIN     , char * , string    , NULL        ,       )
DEF_PARAM(  dvfs_dram_sharing_solver_strict,DVFS_DRAM_SHARING_SOLVER_STRICT  , Flag   , Flag      , TRUE        ,       )
DEF_PARAM(  dvfs_bw_sharing_bus_util_thresh,DVFS_BW_SHARING_BUS_UTIL_THRESH  , float  , float     , 0.95        ,       )
DEF_PARAM(  dvfs_bw_sharing_max_reqs      , DVFS_BW_SHARING_MAX_REQS         , float  , float     , 28.0        ,       )
DEF_PARAM(  dvfs_bw_sharing_max_rw_cost   , DVFS_BW_SHARING_MAX_RW_COST      , float  , float     , 0.25        ,       )
DEF_PARAM(  dvfs_bw_sharing_no_pref_stall , DVFS_BW_SHARING_NO_PREF_STALL    , Flag   , Flag      , TRUE        ,       )
DEF_PARAM(  dvfs_bw_sharing_crit_stats    , DVFS_BW_SHARING_CRIT_STATS       , Flag   , Flag      , TRUE        ,       )
DEF_PARAM(  dvfs_count_l1_access_stall    , DVFS_COUNT_L1_ACCESS_STALL       , Flag   , Flag      , FALSE       ,       ) 
