/* Copyright 2020 HPS/SAFARI Research Groups
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to the
   simulator.  NOTE: Don't screw around with the order of these macro fields without
   fixing the etags regexps.

   DEF_PARAM(  Option, Variable Name, Type, Function, Default Value, Const) 

   Option -- The name of the parameter when given on the command line (eg. "--param_0").
	   All parameters take an argument.  Thus, "--param_0=3" would be a valid
	   specification.

   Variable Name -- The name of the variable that will be created in 'parameters.c' and
	    externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and externed
	   in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will parse the
	    text after the '='.

   Default Value -- The default value that the variable created will have.  This must be
	    the same type as the 'Type' field indicates (or be able to be cast to it).

   Const -- Put the word "const" here if you want this parameter to be constant.  An
	    error messsage will be printed if the user tries to set it with a command
	    line option.

*/

/* L2 L1 prefetcher setup */ 
DEF_PARAM( l2l1pref_on                       , L2L1PREF_ON,                    Flag,    Flag,   FALSE,   )  /* all l2 l1 prefetcher should set Flag TRUE: even for l2hit_stream_pref_on */ 
DEF_PARAM( l2way_pref                        , L2WAY_PREF                     , Flag   , Flag      , FALSE                ,  )
DEF_PARAM( l2markv_pref_on                   , L2MARKV_PREF_ON                , Flag   , Flag      , FALSE                ,  )
DEF_PARAM( l2next_pref_on                    , L2NEXT_PREF_ON                 , Flag   , Flag      , FALSE                ,  )
DEF_PARAM( l2hit_stream_pref_on              , L2HIT_STREAM_PREF_ON           , Flag   , Flag      , FALSE                ,  )  /* stream_prefetch_on must be true */  /* memory.param.def */ 
DEF_PARAM( l2l1_dc_hit_train                 , L2L1_DC_HIT_TRAIN              , Flag   , Flag      , FALSE                ,  ) // data cache hit information is included 

DEF_PARAM(l1_hit_dump_file_on               , L1_HIT_DUMP_FILE_ON            , Flag   , Flag      , FALSE                ,   )
DEF_PARAM(l1_hit_dump_wo_txt                , L1_HIT_DUMP_WO_TXT             , Flag   , Flag      , FALSE                ,   )
DEF_PARAM(l1_hit_dumpfile                   , L1_HIT_DUMPFILE                , char * , string    , "l1hit_dump.out"     ,   )

     /* ideal L2 to L1 prefetcher */

DEF_PARAM(ideal_l2_l1_prefetcher            , IDEAL_L2_L1_PREFETCHER         , Flag   , Flag      , FALSE                ,  ) //ideal prefetcher for dcache 
DEF_PARAM(ideal_l2_icache_prefetcher        , IDEAL_L2_ICACHE_PREFETCHER     , Flag   , Flag      , FALSE                ,  ) // ideal prefetcher for icache 

     /* way predictor*/ 

DEF_PARAM( l1way_pref_send_queue,          L1WAY_PREF_SEND_QUEUE ,         uns,    uns,    4,        ) // l1 insert speed 
DEF_PARAM( l1pref_req_queue_size,          L1PREF_REQ_QUEUE_SIZE,          uns,    uns,    1024,     ) // req queue size 

DEF_PARAM( l1pref_immediate,               L1PREF_IMMEDIATE,               Flag,   Flag,   FALSE,    ) // TRUE : immediate insert false after l1way_pref_timer_dis time later
DEF_PARAM( l1way_pref_timer_dis,           L1WAY_PREF_TIMER_DIS,           uns,    uns,    1000,     )

DEF_PARAM( l1markv_pref_send_queue,        L1MARKV_PREF_SEND_QUEUE ,       uns,    uns,    4,        ) // l1 insert speed 
DEF_PARAM( l1pref_markv_req_queue_size,    L1PREF_MARKV_REQ_QUEUE_SIZE,    uns,    uns,    1024,     ) // req queue size 

     /* markov prefetcher */ 

DEF_PARAM( markv_l2acess_req_q_size,       MARKV_L2ACCESS_REQ_Q_SIZE,      uns,    uns,    64,      ) // req queue size 

DEF_PARAM( l1markv_pref_immediate,         L1MARKV_PREF_IMMEDIATE,         Flag,   Flag,   FALSE,    ) // TRUE : immediate insert false after l1way_pref_timer_dis time later

DEF_PARAM( l1markv_pref_timer_dis,         L1MARKV_PREF_TIMER_DIS,         uns,    uns,    1,        )

DEF_PARAM( l2l1_hit_train,                 L2L1_HIT_TRAIN,                 Flag,    Flag,   TRUE,   ) 

DEF_PARAM( l1markv_req_th,                 L1MARKV_REQ_TH,                 uns,    uns,     1,        )

DEF_PARAM( l2l1_immediate_pref_cache,      L2L1_IMMEDIATE_PREF_CACHE,      Flag,    Flag,   FALSE,    )

DEF_PARAM( l2l1_fill_pref_cache,           L2L1_FILL_PREF_CACHE,           Flag,    Flag,   FALSE,    ) // correct timing model but it fills to pref_cache instead of data cache 
     
     /* stat collection */ 
DEF_PARAM( l2l1_l2_hit_stat,               L2L1_L2_HIT_STAT,               Flag,    Flag,   FALSE,    ) // L2L1_PREF_ON should be enabled 


